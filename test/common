#!/bin/bash

SCRIPT="$0"
describe(){
    local DESCRIPTION=$(cat "$SCRIPT" \
        |sed '/^[^#]/q' \
        |head -n -1 \
        |tail -n +3 \
        |sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' \
        |cut -c3- \
        |sed 's/^/  /')
    echo "$DESCRIPTION"
    exit 0; }
if [ ! -z "$1" ] &&
   $(echo "$1"|grep -q "^\-d$");then describe; fi

PATH=third-party/jshon:$PATH
HELLO=etc/hello.c
HELLO_EXE=etc/hello
HELLO_LLVM_IR=etc/hello.ll

DECLS=etc/decls.c

POUND_DEF=etc/pound-define-func.c
POUND_DEF_STRUCT=etc/pound-define-struct.c
TYPEDEF_TYPE_HASH=etc/typedef-type-hash.c

MACROS=etc/macros.c

MACROS2=etc/macros2.c

AUX=etc/aux.c

LIST=etc/list.c

NULLC=etc/null.c

SCOPES=etc/scopes.c

GCD=etc/gcd-wo-curlies.c

IF=etc/if.c

MORE_LOOPS=etc/more-loops.c

ARRAY_LIST=etc/array_list.c

MUSE_LIST=etc/muse_list.c

SWITCH=etc/switch.c

CLASS=etc/class.cpp

MULTIDIMENSIONAL_ARRAY=etc/multidimensional_array.c

DO_LOOP_NON_COMPOUND_BODY=etc/do-loop-non-compound-body.c

FOR_LOOP_NON_COMPOUND_BODY=etc/for-loop-non-compound-body.c

WHILE_LOOP_NON_COMPOUND_BODY=etc/while-loop-non-compound-body.c

IF_NON_COMPOUND_BODY=etc/if-non-compound-body.c

GLOBAL_VAR=etc/global_var.c

ARRAY_OF_PTRS=etc/array_of_pointers.c

PTR_TO_ARRAY=etc/pointer_to_array.c

TYPEDEF=etc/typedef.c

ARRAY_INITIALIZER=etc/array-initializer.c

ARROW_OPERATOR=etc/arrow-operator.cpp

TYPES=etc/types.c

run_hello(){
    clang-mutate "$@" $HELLO --; }

run_decls(){
    clang-mutate "$@" $DECLS --; }

run_typedef_type_hash_test(){
    clang-mutate "$@" $TYPEDEF_TYPE_HASH --; }

run_pound_define_struct(){
    clang-mutate "$@" $POUND_DEF_STRUCT --; }

run_pound_define(){
    clang-mutate "$@" $POUND_DEF --; }

run_macros(){
    clang-mutate "$@" $MACROS --; }

run_macros2(){
    clang-mutate "$@" $MACROS2 --; }

run_aux(){
    clang-mutate "$@" $AUX --; }

run_list(){
    clang-mutate "$@" $LIST --; }

run_null(){
    clang-mutate "$@" $NULLC --; }

run_scopes(){
    clang-mutate "$@" $SCOPES --; }

run_gcd(){
    clang-mutate "$@" $GCD --; }

run_if(){
    clang-mutate "$@" $IF --; }

run_array_list(){
    clang-mutate "$@" $ARRAY_LIST --; }

run_more_loops(){
    clang-mutate "$@" $MORE_LOOPS --; }

run_muse_list(){
    clang-mutate "$@" $MUSE_LIST --; }

run_switch(){
    clang-mutate "$@" $SWITCH --; }

run_class(){
    clang-mutate "$@" $CLASS --; }

run_multidimensional_array(){
    clang-mutate "$@" $MULTIDIMENSIONAL_ARRAY --; }

run_array_of_pointers(){
    clang-mutate "$@" $ARRAY_OF_PTRS --; }

run_pointer_to_array(){
    clang-mutate "$@" $PTR_TO_ARRAY --; }

run_do_loop_non_compound_body() {
    clang-mutate "$@" $DO_LOOP_NON_COMPOUND_BODY --; }

run_for_loop_non_compound_body(){
    clang-mutate "$@" $FOR_LOOP_NON_COMPOUND_BODY --; }

run_while_loop_non_compound_body() {
    clang-mutate "$@" $WHILE_LOOP_NON_COMPOUND_BODY --; }

run_if_non_compound_body() {
    clang-mutate "$@" $IF_NON_COMPOUND_BODY --; }

run_global_var(){
    clang-mutate "$@" $GLOBAL_VAR --; }

json() {
    cat -|jshon "$@"; }

run_typedef(){
    clang-mutate "$@" $TYPEDEF --; }

run_array_initializer(){
    clang-mutate "$@" $ARRAY_INITIALIZER --; }

run_arrow_operator(){
    clang-mutate "$@" $ARROW_OPERATOR --; }

run_types(){
    clang-mutate "$@" $TYPES --; }

json_filter(){
    cat -|jshon -a -j|grep "\"${1}\":${2}\(,\|}\)"; }

with_src_text(){
    cat -|jshon -a -j|grep "\"src_text\":\"${1}\"\(,\|}\)"; }

json_key_filter(){
    cat -|jshon -a -j|grep "\"${1}\":"; }

# Wrap lines of json objects into a json array.
json_wrap(){
    echo "["
    cat -|sed '$ ! s/$/,/'
    echo "]"; }

# Check if the jshon input has the expected length.
json_has_length(){
    if [ ! $(cat -|jshon -l) -eq $1 ];then
        exit 1;
    fi
}

inserted(){
    wdiff $HELLO <(cat -)|grep "{\+.*\+}"|sed 's/^.*{+//;s/+}.*$//'; }

cuted(){
    wdiff $HELLO <(cat -)|grep "\[-.*-\]"|sed 's/^.*\[-//;s/-\].*$//'; }

contains(){
    if [ ! $? -eq 0 ];then exit 1;fi
    BASE="$1"; shift;
    for TARGET in "$@";do
        if ! $(echo "$BASE"|grep -- "$TARGET" >/dev/null 2>/dev/null);then
            echo "missing \"$TARGET\""
            exit 1;
        fi
    done; }

not_contains(){
    if [ ! $? -eq 0 ];then exit 1;fi
    BASE="$1"; shift;
    for TARGET in "$@";do
        if $(echo "$BASE"|grep -- "$TARGET" >/dev/null 2>/dev/null);then
            exit 1;
        fi
    done; }

equals() {
    if [ ! "$1" == "$2" ]; then
        echo "\"$1\" != \"$2\""
        exit 1;
    fi }
