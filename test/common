#!/bin/bash

SCRIPT="$0"
describe(){
    local DESCRIPTION=$(cat "$SCRIPT" \
        |sed '/^[^#]/q' \
        |head -n -1 \
        |tail -n +3 \
        |sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' \
        |cut -c3- \
        |sed 's/^/  /')
    echo "$DESCRIPTION"
    exit 0; }
if [ ! -z "$1" ] &&
   $(echo "$1"|grep -q "^\-d$");then describe; fi

HELLO=etc/hello.c
HELLO_EXE=etc/hello

DECLS=etc/decls.c

MACROS=etc/macros.c

run_hello(){
    clang-mutate "$@" $HELLO --; }

run_decls(){
    clang-mutate "$@" $DECLS --; }

run_macros(){
    clang-mutate "$@" $MACROS --; }

json_filter(){
    cat -|jshon -a -j|grep "\"${1}\":${2}\(,\|}\)"; }

json_key_filter(){
    cat -|jshon -a -j|grep "\"${1}\":"; }

# Wrap lines of json objects into a json array.
json_wrap(){
    echo "["
    cat -|sed '$ ! s/$/,/'
    echo "]"; }

# Check if the jshon input has the expected length.
json_has_length(){
    if [ ! $(cat -|jshon -l) -eq $1 ];then
        exit 1;
    fi
}

inserted(){
    wdiff $HELLO <(cat -)|grep "{\+.*\+}"|sed 's/^.*{+//;s/+}.*$//'; }

cuted(){
    wdiff $HELLO <(cat -)|grep "\[-.*-\]"|sed 's/^.*\[-//;s/-\].*$//'; }

contains(){
    if [ ! $? -eq 0 ];then exit 1;fi
    BASE="$1"; shift;
    for TARGET in "$@";do
        if ! $(echo "$BASE"|grep "$TARGET" >/dev/null 2>/dev/null);then
            echo "missing \"$TARGET\""
            exit 1;
        fi
    done; }

not_contains(){
    if [ ! $? -eq 0 ];then exit 1;fi
    BASE="$1"; shift;
    for TARGET in "$@";do
        if ! $(echo "$BASE"|grep -v "$TARGET" >/dev/null 2>/dev/null);then
            exit 1;
        fi
    done; }
